{
    "contents" : "\n\n# https://github.com/gimoya/theBioBucket-Archives/blob/master/R/txtmining_pdf.R\n# http://stackoverflow.com/questions/17563896/readpdf-tm-package-in-r/19926301#19926301\n# https://gist.github.com/benmarwick/11333467 downloads\n# the file\n\n\nrequired <<- 0\nactualData <<- NULL\n\n# http://www.inside-r.org/packages/cran/tm/docs/readPDF\n#Required function for every methods\n#' Data extrapolation\n#'\n#' \\code{RequiredFunction} returns the data set actualData.\n#'\n#' @return Returns the average of \\code{actualData}.\n#'\n#' @export\nRequiredFunction <- function() {\n\n    #' @import utils\n    # devtools::use_package(\"utils\")\n\n\n    # convert from pdf to txt -----------------\n    #' @import tm\n    # devtools::use_package(\"tm\")\n\n    # data text\n    uri2 <- system.file(\"extdata\", \"bulletin2013_14.txt\", package = \"AverageAge\")\n\n    # two cases for having pdftotext and not having pdftotext\n      if (all(file.exists(Sys.which(c(\"pdfinfo\", \"pdftotext\"))))) {\n        #download the file\n        url <- \"http://web.williams.edu/admin/registrar/catalog/bulletin2013_14.pdf\"\n        dest <- tempfile(fileext = \".pdf\")\n        download.file(url, dest, mode = \"wb\")\n        #temp file uri\n        uri1 <- sprintf(\"file://%s\", dest)\n        #convert file\n        pdf <- (tm::readPDF(control = list(text = \"-layout\")))(elem = list(uri = uri1),\n              language = \"en\", id = \"id1\")\n          txt <- toString(pdf[1])\n      } else {\n       txt <- paste(readLines(uri2), sep=\"\\n\", collapse=\"\\n\")\n\n     }\n\n\n    # string manipulation and data extraction --------\n    #' @import stringr\n\n    # devtools::use_package(\"stringr\")\n\n    # getting string sets of BA and BS(seperated)\n    BaTxt <- stringr::str_match_all(txt, \"[:digit:]{4}, (BA|AB|BS)\")\n    # converting to (lists of strings with just number)\n    BaTxt <- stringr::str_match_all(BaTxt, \"[:digit:]{4}\")\n\n    # converting to numeric\n\n    BaData <- lapply(BaTxt, as.numeric)\n\n    # converting to matrix\n\n    BaMat <- as.matrix(data.frame(BaData))\n\n    # data of prof's age matrix\n\n    actualData <<- 2015 - BaMat + 22\n    required <<- 1\n}\n\n\n#calculating the average age\n\n#' Average of faculty ages\n#'\n#' \\code{Average} returns the average of the data set actualData.\n#'\n#' @return Returns the average of \\code{actualData}.\n#'\n#' @export\nAverage  <- function() {\n  if(required!=1){RequiredFunction()}\n AveAge <- mean(actualData)\n print(AveAge)\n}\n#calculates the range of faculty ages\n#' Range of faculty ages\n#'\n#' \\code{Range} returns the range of the data set actualData.\n#'\n#' @return Returns the range of \\code{actualData}.\n#'\n#' @export\nRange <- function() {\n  if(required!=1){RequiredFunction()}\n  AgeRange <- max(actualData)-min(actualData)\n  print(AgeRange)\n}\n#calculates the maximum value of faculty ages\n#' Maximum value of faculty ages\n#'\n#' \\code{Max} returns the maximum value of the data set actualData.\n#'\n#' @return Returns the maximum of \\code{actualData}.\n#'\n#' @export\nMax <- function() {\n  if(required!=1){RequiredFunction()}\n  AgeMax <- max(actualData)\n  print(AgeMax)\n}\n\n#calculates the minimum value of faculty ages\n#' Minimum value of faculty ages\n#'\n#' \\code{Min} returns the minimum value of the data set actualData.\n#'\n#' @return Returns the minimum of \\code{actualData}.\n#'\n#' @export\nMin <- function() {\n  if(required!=1){RequiredFunction()}\n  AgeMin <- min(actualData)\n  print(AgeMin)\n}\n\n#plots the histogram of faculty ages\n#' Histogram  of faculty ages\n#'\n#' \\code{AgeHist} returns the histogram of the data set actualData.\n#'\n#' @return Returns the histogram of \\code{actualData}.\n#'\n#' @export\nPlotHist <- function(){\n  if(required!=1){RequiredFunction()}\n  AgeHist <- hist(actualData,main=\"Distribution of Age\",xlab=\"Age\")\n}\n\n#prints all the statistics of faculty ages\n#' Information  of faculty ages\n#'\n#' \\code{AgeHist} returns all the above information of actualData.\n#'\n#' @return Returns the information of \\code{actualData}.\n#'\n#' @export\nPrintAll <- function(){\n  if(required!=1){RequiredFunction()}\n  print('Average:')\n  Average()\n  print('Range:')\n  Range()\n  print('Maximum:')\n  Max()\n  print('Minimum:')\n  Min()\n\n  PlotHist()\n\n}\n\n\n\n# data frame?probably matrix BaData<-data.frame(BaTxt)\n# BsData<-data.frame(BsTxt)\n\n# good stuff:\n# http://stackoverflow.com/questions/9424311/how-to-get-mean-median-and-other-statistics-over-entire-matrix-array-or-dataf\n\n",
    "created" : 1454446600435.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3533034222",
    "id" : "AFF8F6FE",
    "lastKnownWriteTime" : 1454459420,
    "path" : "~/Desktop/AverageAge/R/AverageAge.R",
    "project_path" : "R/AverageAge.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}